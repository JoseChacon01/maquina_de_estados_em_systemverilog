module ControleAcesso (
  input logic clk,          // Sinal de relógio
  input logic start_btn,    // Botão de início
  input logic red_btn,      // Botão vermelho
  input logic green_btn,    // Botão verde
  input logic blue_btn,     // Botão azul
  output logic unlock       // Saída destravar (u)
);

  // Definindo os estados da máquina de estados
  typedef enum logic [2:0] {
    Espera,
    Inicio,
    Vermelho1,
    Azul,
    Verde,
    Vermelho2
  } State; //Diferentes estados da máquina de estados.

  
  logic [2:0] state, next_state; //Estado atual e proximo estado
  logic a;


  //Registros de estado:

  always_ff @(posedge clk) begin
    if (start_btn)
      state <= Inicio;  //Se o botão de início (start_btn) for pressionado, a máquina de estados passa para o estado de Início.
    else
      state <= next_state;
  end



  // Lógica de transição de estado
  always_comb begin
    a = (red_btn | green_btn | blue_btn) ? 1 : 0; //"a" é um sinal que indica se algum botão (vermelho, verde ou azul) está sendo pressionado. Se pelo menos um desses botões estiver pressionado, "a" é definido como 1; caso contrário, é definido como 0. 

    case (state)

      Espera: begin //Se o botão de início (start_btn) for pressionado, a próxima transição é para o estado Inicio; caso contrário, permanece no estado Espera.
        next_state = (start_btn) ? Inicio : Espera;
      end

      Inicio: begin //Se o botão vermelho (red_btn) for pressionado, a próxima transição é para o estado Vermelho1; caso contrário, retorna para o estado Espera.
        next_state = (red_btn) ? Vermelho1 : Espera;
      end

      Vermelho1: begin //Se o botão azul (blue_btn) for pressionado, a próxima transição é para o estado Azul. Se nenhum botão for pressionado (a é 0), permanece em Vermelho1; caso contrário, retorna para o estado Espera.
        next_state = (blue_btn) ? Azul : (a) ? Vermelho1 : Espera;
      end

      Azul: begin //Se o botão verde (green_btn) for pressionado, a próxima transição é para o estado Verde. Se nenhum botão for pressionado (a é 0), permanece em Azul; caso contrário, retorna para o estado Espera.
        next_state = (green_btn) ? Verde : (a) ? Azul : Espera;
      end

      Verde: begin //Se o botão vermelho (red_btn) for pressionado, a próxima transição é para o estado Vermelho2. Se nenhum botão for pressionado (a é 0), permanece em Verde; caso contrário, retorna para o estado Espera.
        next_state = (red_btn) ? Vermelho2 : (a) ? Verde : Espera;
      end

      Vermelho2: begin //Sempre que atinge o estado Vermelho2, a próxima transição é de volta para o estado Espera.
        next_state = Espera;
      end

      default: begin //Caso nenhum dos casos anteriores seja atendido, o estado é definido como Espera por padrão.
        next_state = Espera;
      end
    endcase
  end

  // Saída de destravamento - Sequência correta foi inserida e a porta está destravada.
  always_comb begin
    unlock = (state == Vermelho2) ? 1 : 0; //Quando a variável state é igual a Vermelho2 a porta é destravada -  (unlock = 1) 
  end

endmodule
